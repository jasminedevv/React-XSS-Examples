{"version":3,"sources":["components/PostsForm.js","components/Review.js","components/Posts.js","components/XSSTester.js","App.js","serviceWorker.js","index.js"],"names":["PostsForm","handleSubmit","bind","event","preventDefault","post","link","target","value","postTitle","review","axios","then","res","window","location","data","postId","onSubmit","this","htmlFor","id","name","type","rows","cols","React","Component","Review","props","createMarkup","state","match","params","get","setState","markup","__html","marked","href","dangerouslySetInnerHTML","Posts","posts","className","map","key","_id","to","XSSTester","renderInjection","injection","qs","search","action","Header","App","exact","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f544e55a.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\n\n\nclass PostsForm extends React.Component {\n  constructor () {\n    super()\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleSubmit (event) {\n    event.preventDefault()\n    const post = {\n      link: event.target.link.value,\n      postTitle: event.target.postTitle.value,\n      review: event.target.review.value\n    }\n    axios.post('/api/posts', { post })\n      .then(res => {\n        window.location = '/review/' + res.data.postId\n      })\n  }\n\n  render () {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor='postTitle'>Enter a title</label>\n        <br />\n        <input id='postTitle' name='postTitle' type='text' />\n        <br /><br />\n\n        <label htmlFor='link'>Enter a link</label>\n        <br />\n        <input id='link' name='link' type='link' />\n        <br />        <br />\n\n        <label htmlFor='Review'>Write your review</label>\n        <br />\n\n        <textarea rows='4' cols='50' id='review' name='review' type='text' />\n        <br />\n        <i>Markdown supported</i>\n        <br />\n        <br />\n\n        <button type='submit'>Create New Post</button>\n      </form>\n    )\n  }\n}\n\nexport default PostsForm\n","import React from 'react'\nimport axios from 'axios'\nimport marked from 'marked'\n\nclass Review extends React.Component {\n  constructor (props) {\n    super()\n    this.createMarkup = this.createMarkup.bind(this)\n    this.state = {\n      postId: props.match.params.id,\n      post: {\n        review: ''\n      }\n    }\n  }\n\n  componentDidMount () {\n    var post = ''\n    axios.get(`/api/posts/${this.state.postId}`)\n      .then(res => {\n        post = res.data\n        this.setState({ post })\n      })\n  }\n\n  createMarkup (markup) {\n    return { __html: marked(markup) }\n  }\n\n  render () {\n    return (\n      <div>\n        <h1>{this.state.post.postTitle}</h1>\n        <a href={this.state.post.link}>Link</a>\n        <div dangerouslySetInnerHTML={this.createMarkup(this.state.post.review)} />\n      </div>\n    )\n  }\n}\n\nexport default Review\n","import React from 'react'\nimport axios from 'axios'\nimport { BrowserRouter as Router, Link } from 'react-router-dom'\n\nclass Posts extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      posts: []\n    }\n  }\n\n  componentDidMount() {\n    var posts = []\n    axios.get('/api/posts')\n      .then(res => {\n        posts = res.data\n        this.setState({ posts })\n      })\n  }\n\n  render() {\n    return (\n      <div className='Posts'>\n        <h1>Meme Review DOT COM</h1>\n        <ul>\n          {this.state.posts.map(post => (\n            <li key={post._id}>\n              <hr />\n              <h2><a href={post.link}>{post.postTitle}</a></h2>\n              <Link to={`review/${post._id}`}>Read Review</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Posts\n","// render a query from the browser bar\n// send users here via a form on the front page\nimport React from 'react'\nimport * as qs from 'query-string'\n\nclass XSSTester extends React.Component {\n  constructor(props) {\n    super()\n    this.renderInjection = this.renderInjection.bind(this)\n  }\n\n  renderInjection() {\n    var injection = qs.parse(window.location.search).injection\n    return <div className='injection' dangerouslySetInnerHTML={{ __html: injection }} />\n  }\n\n  render() {\n    return (\n      <div className='XSSTester'>\n        <h1>Testing Injection:</h1>\n        <p>Injection below:</p>\n        {this.renderInjection()}\n        <form action='/testXSS'>\n          <p>Test XSS payloads here:</p>\n          <input name='injection' />\n          <button type='submit'>Test XSS</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default XSSTester\n","import React from 'react'\nimport PostsForm from './components/PostsForm'\nimport Review from './components/Review'\nimport Posts from './components/Posts'\nimport XSSTester from './components/XSSTester'\n\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom'\n\nfunction Header () {\n  return (\n    <nav className='nav'>\n      <Link to='/'>View All Reviews</Link>\n      <span> | </span>\n      <Link to='/write-review'>New Review</Link>\n    </nav>\n  )\n}\n\nfunction App () {\n  return (\n    <Router>\n      <Header />\n      <Switch className='Content'>\n        <Route exact path='/' component={Posts} />\n        <Route path='/write-review' component={PostsForm} />\n        <Route path='/review/:id' component={Review} />\n        <Route path='/testXSS' component={XSSTester} />\n        <Route component={ () => {return <h1>404: not found</h1>} } />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}